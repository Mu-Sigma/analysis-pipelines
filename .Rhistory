source('~/HomeAgain/InD/git/Foundation_Brick_Lite_EDA/Poc.R')
obj <- read_input(filePath = 'support/hotel_new.csv')
obj <- read_input(filePath = 'support/hotel_new.csv')
print(obj@registry)
print(obj@recipe)
obj <- obj %>>% outlierPlot(method = "iqr",columnName = "Occupancy",cutoffValue = 0.01,priColor = "blue",optionalPlots = 0) %>>% univarCatDistPlots(uniCol = "building_type",priColor = "blue",optionalPlots = 0)
print(obj@recipe)
obj1 <- obj %>>% generateOutput()
tmp <- readRDS("/home/neeratyoy/HomeAgain/InD/git/Foundation_Brick_Lite_EDA/Prototypes/predefFunctions.RDS")
tmp
#Outlier Plot Function
outlierPlot <- function(data,method,columnName,cutoffValue, priColor,optionalPlots){
if(method == "iqr"){
outlierPlotObj <- ggplot2::ggplot(data, ggplot2::aes(x="", y = data[,columnName])) +
ggplot2::geom_boxplot(fill = priColor,alpha=0.7) +
ggplot2::theme_bw() +
ggplot2::theme(panel.border=ggplot2::element_rect(size=0.1),panel.grid.minor.x=ggplot2::element_blank(),panel.grid.major.x=ggplot2::element_blank(),legend.position = "bottom") +ggplot2::ylab(columnName) + ggplot2::xlab("")
}
if(method == "percentile"){
Outlier<-data$Outlier
Value<-data[,columnName]
outlierPlotObj <- ggplot2::ggplot(data) +
ggplot2::geom_histogram(ggplot2::aes(x = Value, fill = Outlier),bins=30,alpha=0.7) +
ggplot2::scale_fill_manual(values = c(priColor, "red"),breaks=c("FALSE", "TRUE"),
labels=c("Normal", "Outlier"),name = "Status") +
ggplot2::theme_bw() +
ggplot2::theme(panel.border=ggplot2::element_rect(size=0.1),panel.grid.minor.x=ggplot2::element_blank(),panel.grid.major.x=ggplot2::element_blank(),legend.position = "bottom") +
ggplot2::xlab(columnName)
}
if(method == "z_score"){
data$zScore <- scale(data[,columnName],center = T, scale = T)
Zscore<-as.vector(data$zScore)
y<-data[,columnName]
outlierPlot <-
ggplot2::ggplot(data, ggplot2::aes(x = Zscore, y = y)) +
ggplot2::geom_point(ggplot2::aes(color = Outlier),alpha=0.7)+
ggplot2::scale_color_manual("Status", values = c("TRUE" = "red","FALSE" =priColor))+
ggplot2::ylab(columnName)+
ggplot2::theme_bw() +
ggplot2::theme(panel.border=ggplot2::element_rect(size=0.1),panel.grid.minor.x=ggplot2::element_blank(),panel.grid.major.x=ggplot2::element_blank(),legend.position = "bottom") +
ggplot2::xlab("Z-score")+
ggplot2::geom_vline(xintercept = (cutoffValue),linetype = "dashed")+
ggplot2::geom_vline(xintercept = -(cutoffValue), linetype = "dashed")
}
#conditionToBe
if(optionalPlots)
{
outlierPlotObj <- plotly::ggplotly(outlierPlotObj)
outlierPlotObj$x$layout$margin$l <- outlierPlotObj$x$layout$margin$l + 30
outlierPlotObj$x$layout$margin$b <- outlierPlotObj$x$layout$margin$b + 3
}
return(outlierPlotObj)
}
outlierPlot(iris, "iqr", "Petal.Length", 0.2, "black", FALSE)
outlierPlot(iris, "iqr", "Petal.Length", 0.2, "black", TRUE)
outlierPlot(iris, "percentile", "Petal.Length", 0.2, "black", TRUE)
outlierPlot(iris, "percentile", "Petal.Length", 1, "black", TRUE)
outlierPlot(iris, "percentile", "Petal.Length", 0.5, "black", TRUE)
outlierPlot(iris, "percentile", "Petal.Length", 0.5, "black", FALSE)
outlierPlot(iris, "z-score", "Petal.Length", 0.5, "black", FALSE)
#Outlier Plot Function
outlierPlot <- function(data,method,columnName,cutoffValue, priColor,optionalPlots){
if(method == "iqr"){
outlierPlotObj <- ggplot2::ggplot(data, ggplot2::aes(x="", y = data[,columnName])) +
ggplot2::geom_boxplot(fill = priColor,alpha=0.7) +
ggplot2::theme_bw() +
ggplot2::theme(panel.border=ggplot2::element_rect(size=0.1),panel.grid.minor.x=ggplot2::element_blank(),panel.grid.major.x=ggplot2::element_blank(),legend.position = "bottom") +ggplot2::ylab(columnName) + ggplot2::xlab("")
}
if(method == "percentile"){
Outlier<-data$Outlier
Value<-data[,columnName]
outlierPlotObj <- ggplot2::ggplot(data) +
ggplot2::geom_histogram(ggplot2::aes(x = Value, fill = Outlier),bins=30,alpha=0.7) +
ggplot2::scale_fill_manual(values = c(priColor, "red"),breaks=c("FALSE", "TRUE"),
labels=c("Normal", "Outlier"),name = "Status") +
ggplot2::theme_bw() +
ggplot2::theme(panel.border=ggplot2::element_rect(size=0.1),panel.grid.minor.x=ggplot2::element_blank(),panel.grid.major.x=ggplot2::element_blank(),legend.position = "bottom") +
ggplot2::xlab(columnName)
}
if(method == "z_score"){
data$zScore <- scale(data[,columnName],center = T, scale = T)
Zscore<-as.vector(data$zScore)
y<-data[,columnName]
outlierPlotObj <-
ggplot2::ggplot(data, ggplot2::aes(x = Zscore, y = y)) +
ggplot2::geom_point(ggplot2::aes(color = Outlier),alpha=0.7)+
ggplot2::scale_color_manual("Status", values = c("TRUE" = "red","FALSE" =priColor))+
ggplot2::ylab(columnName)+
ggplot2::theme_bw() +
ggplot2::theme(panel.border=ggplot2::element_rect(size=0.1),panel.grid.minor.x=ggplot2::element_blank(),panel.grid.major.x=ggplot2::element_blank(),legend.position = "bottom") +
ggplot2::xlab("Z-score")+
ggplot2::geom_vline(xintercept = (cutoffValue),linetype = "dashed")+
ggplot2::geom_vline(xintercept = -(cutoffValue), linetype = "dashed")
}
#conditionToBe
if(optionalPlots)
{
outlierPlotObj <- plotly::ggplotly(outlierPlotObj)
outlierPlotObj$x$layout$margin$l <- outlierPlotObj$x$layout$margin$l + 30
outlierPlotObj$x$layout$margin$b <- outlierPlotObj$x$layout$margin$b + 3
}
return(outlierPlotObj)
}
obj <- read_input(filePath = 'support/hotel_new.csv')
source("Poc.R")
obj <- read_input(filePath = 'support/hotel_new.csv')
obj <- obj %>>% outlierPlot(method = "iqr",columnName = "Occupancy",cutoffValue = 0.01,priColor = "blue",optionalPlots = 0) %>>% univarCatDistPlots(uniCol = "building_type",priColor = "blue",optionalPlots = 0)
obj %>>% generateReport('~/Desktop')
obj <- obj %>>% bivarPlots('Occupancy','PercentTransientNights',priColor = "blue","black")
bivarPlots <- function(object,
select_var_name_1,
select_var_name_2,
priColor = "blue",secColor='black')
{
x=object[, select_var_name_1]
y=object[, select_var_name_2]
bivarPlot <- ggplot2::ggplot(object, ggplot2::aes(x,y))+
ggplot2::geom_point(color=priColor,alpha=0.7) +
ggplot2::geom_smooth(method = lm,color=secColor)+
ggplot2::xlab(select_var_name_1) +
ggplot2::ylab(select_var_name_2) + ggplot2::theme_bw() +
ggplot2::ggtitle(paste('Bivariate plot for',select_var_name_1,'and',select_var_name_2,sep=' '))+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),axis.text = ggplot2::element_text(size=10),
axis.title=ggplot2::element_text(size=10))
return(bivarPlot)
}
obj <- obj %>>% registerFunction('bivarPlots',"Bivariate Plots")
obj <- obj %>>% bivarPlots('Occupancy','PercentTransientNights',priColor = "blue","black")
obj %>>% generateReport('~/Desktop')
